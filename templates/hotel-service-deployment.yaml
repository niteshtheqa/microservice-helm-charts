apiVersion: apps/v1
kind: Deployment
metadata:
  name: hotel-service
  labels:
    app: hotel-service
    run: hotel-service
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: hotel-service
      run: hotel-service
  template:
    metadata:
      labels:
        app: hotel-service
        run: hotel-service
    spec:
      containers:
        - name: hotel-service
          image: "{{ .Values.image.hotelService.repository }}:{{ .Values.image.hotelService.tag }}"
          resources:
            limits:
              cpu: {{ .Values.resources.hotelService.limits.cpu }}
              memory: {{ .Values.resources.hotelService.limits.memory }}
            requests:
              cpu: {{ .Values.resources.hotelService.requests.cpu }}
              memory: {{ .Values.resources.hotelService.requests.memory }}
          ports:
            - containerPort: 8082

        - name: postgres
          image: postgres:13
          env:
            - name: POSTGRES_DB
              value: "hotel_db"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "admin123"
          ports:
            - containerPort: 5432
          resources:
            limits:
              cpu: {{ .Values.resources.postgres.limits.cpu }}
              memory: {{ .Values.resources.postgres.limits.memory }}
            requests:
              cpu: {{ .Values.resources.postgres.requests.cpu }}
              memory: {{ .Values.resources.postgres.requests.memory }}
          volumeMounts:
            - name: postgres-persistent-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-persistent-storage
          emptyDir: {}  # Replace with PersistentVolumeClaim for persistent storage
